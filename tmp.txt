- proste uruchomienie
  defaults
  1) pierwsza baza to primary
  2) porownanie po kluczach glownych/uniq
  3) sprawdzanie po partycjach jesli sa
	- jesli partycja/tabelka jest za duza uzyj sample
	select count(*) from data_owner.table1 [partition (P_0001)] sample (0.001);
  4) parallelizm 1 
  5) sqlparallelizm 1
  6) no db load limit
  7) skip errors
  8) skip no pk/uk tables
  9) limit na ilosc roznic 50 000


- output do 1 pliku, diffy do katalogu w formacie 
	funkcje - loguj biezace (jeden plik)
		- dump roznic	(katalog/wiele plikow)
	

- modulowe podejscie do liczenia sum


- setup 
	get params, 
	set process name, 
	verify time range,
	create pid file, 
	read state file

- prepare table list
	retrieve list from databases (tables,partitions,subpatrtitions,stats)
	for each subpart/part/table bigger than x select pk from table [partition (...)] sample (...); -> chunks
	remap table/schema/partition/subpart? names
	remove excluded tables
	set comparision type (column/sha1/pk) for each table

- compare tables
	for each table/partition/subpart/chunk
		fork comparing process
		print comparing results  
		verify time range
		varify database load

- comparing process

- output module
	- gets result for a table and prints output
	- function for printing regular error messages

