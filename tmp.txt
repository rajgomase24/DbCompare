- proste uruchomienie
  defaults
  1) pierwsza baza to primary
  2) porownanie po kluczach glownych/uniq
  3) sprawdzanie po partycjach jesli sa
	- jesli partycja/tabelka jest za duza uzyj sample
	select count(*) from data_owner.table1 [partition (P_0001)] sample (0.001);
  4) parallelizm 1 
  5) sqlparallelizm 1
  6) no db load limit
  7) skip errors
  8) skip no pk/uk tables
  9) limit na ilosc roznic 50 000, powyzej tego nie robi second stage


- output do 1 pliku, diffy do katalogu w formacie 
	funkcje - loguj biezace (jeden plik)
		- dump roznic	(katalog/wiele plikow)
	

- modulowe podejscie do liczenia sum


- setup 
	get params, 
	set process name, 
	verify time range,
	create pid file, 
	read state file

- prepare table list
	retrieve list from databases (tables,partitions,subpatrtitions,stats)
	for each subpart/part/table bigger than x select pk from table [partition (...)] sample (...); -> chunks
	remap table/schema/partition/subpart? names
	remove excluded tables
	set comparision type (column/sha1/pk) for each table

- compare tables
	for each table/partition/subpart/chunk
		fork comparing process
		print comparing results  
		verify time range
		varify database load

- comparing process DataComparisonWorker.pm
	CoordinatorProcess - forks as a separate process to keep main process away from threads  
		write pipe,
		gets hash
			{ datasources => { dbname => { connection => { user=>user1, pass=>pass1, host=>dbhost1, port=>dbport1, service=>dbservice },
					schema => user1,
					table => table1,
					partition_name => part1,
					partition_for => '....',
					#subpartition_name => '....', ??? chyba bez subpartycji, pk_range to zrobi a subpartycji interwalowych nie ma wiec
					#				pk_range powinien byc bezpieczny
					pk_range => '...',
					chunk_name => ..., #skrocona wersja partition for/partition name albo/skrocona wersja pk_range - sluzy do wyswietlania
					},
					dbname2=> {

					}
			  settings => {
					compare_col => ....,
					compare_row => sha1
					pk_transformation => 'sub { .... } returns' ??? (w DIFFS dla kazdego klucza zmodyfikowanego powinien byc zapisany w %PK_ORIGINALS oryginalne wartosci dla porownywarki w stage 2
					select_concurency => 1
					stage2_rounds => 5,
					stage2_sleep => 30,
					exclude_cols => [col2,col3],
					dont_check_type => true,
					dont_check_nullable => true
			 }
		}
	Worker - 1 thread per database

- output module Logger.pm
	- gets result for a table and prints output
	- function for printing regular error messages

